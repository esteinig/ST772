import os

#######################################################
############### Snakefile Configuration ###############
#######################################################

configfile: "bengal-bay-0.1.json"

SAMPLES, PAIRS, = glob_wildcards("files/{sample}_{pair}.fastq.gz")

SAMPLES = list(set(SAMPLES))

DB = ["vfdb_core"]

#########################################################################
### Helper functions to access and construct commands from parameters ###
### in the configuration file for this Snakemake Pipeline             ###
#########################################################################

def get_params_trailing():

	return "TRAILING:" + str(config["trimmomatic"]["trailing"])

def get_params_leading():

	return "LEADING:" + str(config["trimmomatic"]["leading"])

def get_params_minlen():

	return "MINLEN:" + str(config["trimmomatic"]["min_len"])

def get_params_illuminaclip():

    params = config["trimmomatic"]

    return "ILLUMINACLIP:" + params["adapter_path"] + ":" \
           + str(params["seed_mismatch"]) + ":" + str(params["palindrome_threshold"]) \
           + ":" + str(params["clip_threshold"]) + ":" + str(params["min_adapter_length"]) \
		   + ":" + str(params["keep_both_reads"])

def get_params_slidingwindow():

    params = config["trimmomatic"]

    return "SLIDINGWINDOW" + ":" + str(params["window_size"]) + ":" + str(params["window_quality"])


def get_genus_options(wildcards):

    if config["prokka"]["genus"]:
        cmd = "--usegenus --genus " + config["prokka"]["genus"]
    else:
        cmd = ""

    return cmd

def get_reference_options(wildcards):

    if config["quast"]["reference"]:
        cmd = "-R " + config["quast"]["reference"]
    else:
        cmd = ""

    return cmd

def get_forward_files(wildcards):

    return "files/{id}_1.fastq.gz".format(id=wildcards.sample)

def get_reverse_files(wildcards):

    return "files/{id}_2.fastq.gz".format(id=wildcards.sample)


##############################################
############### Consuming Rule ###############
##############################################

rule all:
    input:
        expand("kraken/{sample}_report.tab", sample=SAMPLES),
        expand("fastqc/{sample}_2_fastqc.html", sample=SAMPLES),

        "fasttree/snippy.core.tree" if config["phylogeny"] else [],
        "raxml-ng/snippy.core.raxml.bestTree" if config["phylogeny"] else [],

        expand("mykrobe/{sample}/{sample}.json", sample=SAMPLES) if config["typing"] else [],

        expand("ariba/{db}/{sample}.report.tab", db=DB, sample=SAMPLES) if config["typing"] else [],
        expand("mlst/{sample}.mlst.tab", sample=SAMPLES) if config["assembly"] and config["typing"] else [],

        "gubbins/recomb.final_tree.tre"  if config["recombination"] else [],
        "roary/gene_presence_absence.csv" if config["pangenome"] else []

########################################
############### QC Rules ###############
########################################

rule trimmomatic:
    input:
        fwd = get_forward_files,
        rev = get_reverse_files
    params:
        illumina_clip=get_params_illuminaclip(),
        sliding_window=get_params_slidingwindow(),
        minlen=get_params_minlen(),
        trailing=get_params_trailing(),
        leading=get_params_leading()
    output:
        fwd_p="trimmed/{sample}_trimmed_P_1.fastq",
        fwd_u="trimmed/{sample}_trimmed_U_1.fastq",
        rev_p="trimmed/{sample}_trimmed_P_2.fastq",
        rev_u="trimmed/{sample}_trimmed_U_2.fastq",
        fwd_fq="fastq/{sample}_1.fastq",
        rev_fq="fastq/{sample}_2.fastq"
    threads:
        config["trimmomatic"]["cpu"]
    shell:
        "trimmomatic PE -threads {threads} {input.fwd} {input.rev} {output.fwd_p} {output.fwd_u}"
        " {output.rev_p} {output.rev_u} {params.illumina_clip} {params.sliding_window} {params.leading}"
        " {params.trailing} {params.minlen} && "
        "ln -s $(pwd)/{output.fwd_p} $(pwd)/{output.fwd_fq} && ln -s $(pwd)/{output.rev_p} $(pwd)/{output.rev_fq} && "
        "touch -h {output.fwd_fq} && touch -h {output.rev_fq}"

rule fastqc:
    input:
        fwd_after="fastq/{sample}_1.fastq",
        rev_after="fastq/{sample}_2.fastq"
    output:
        "fastqc/{sample}_1_fastqc.html",
        "fastqc/{sample}_2_fastqc.html",
    shell:
        "fastqc --outdir fastqc {input.fwd_after}"
        " && fastqc --outdir fastqc {input.rev_after}"

rule kraken:
    input:
        fwd_kra="fastq/{sample}_1.fastq",
        rev_kra="fastq/{sample}_2.fastq"
    params:
        db=config["kraken"]["db_path"]
    output:
        tax="kraken/{sample}_tax.out",
        report="kraken/{sample}_report.tab"
    threads:
        config["kraken"]["cpu"]
    shell:
        "cat {params.db}/database.* > /dev/null"
        " && kraken --db {params.db} --threads {threads} --output {output.tax}"
        " --fastq-input --paired {input.fwd_kra} {input.rev_kra}"
        " && kraken-report --db {params.db} {output.tax} > {output.report}"

##############################################
########### Assembly and Annotation ##########
##############################################

if config["assembly"]:

    rule shovill:
        input:
            forward = "fastq/{sample}_1.fastq",
            reverse = "fastq/{sample}_2.fastq"
        params:
            spades = config["shovill"]["spades"],
            cpu = config["shovill"]["cpu"],
            depth = config["shovill"]["depth"],
            other = config["shovill"]["other"]
        output:
            "shovill/{sample}/contigs.fa"
        shell:
            "shovill --outdir shovill/{wildcards.sample} --depth {params.depth} --force --R1 {input.forward} "
            "--R2 {input.reverse} --cpus {params.cpu} {params.other}"

    rule prokka:
        input:
            "shovill/{sample}/contigs.fa"
        params:
            cpu = config["prokka"]["cpu"],
            evalue = config["prokka"]["evalue"],
            genus_options = get_genus_options,
            kingdom = config["prokka"]["kingdom"],
            other = config["prokka"]["other"]
        output:
            "prokka/{sample}/{sample}.gbk",
            "prokka/{sample}/{sample}.gff"
        shell:
            "prokka --force --outdir prokka/{wildcards.sample} --cpus {params.cpu} {params.genus_options} "
            "--kingdom {params.kingdom} --addgenes --addmrna --prefix {wildcards.sample} {params.other} {input}"

    if config["typing"]:

        rule mlst:
            input:
                "shovill/{sample}/contigs.fa"
            output:
                "mlst/{sample}.mlst.tab"
            shell:
                "mlst {input} > {output}"

########################################
############### Typing #################
########################################

if config["typing"]:

    # Warning. This is some black magic with the LD_LIBRARY_PATH
    # to make MykrobePredictor work in Conda. MCCORTEX31 fails for
    # ZLIB library dependency, which is present in CONDA_PREFIX/lib

    rule mykrobe_predictor:
        input:
            forward = "fastq/{sample}_1.fastq",
            reverse = "fastq/{sample}_2.fastq"
        params:
            species=config["mykrobe"]["species"]
        output:
            "mykrobe/{sample}/{sample}.json"
        conda:
            "envs/mykrobe.yaml"
        shell:
            "LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH && "
            "echo $LD_LIBRARY_PATH && "
            "mykrobe predict --skeleton_dir ./mykrobe/{wildcards.sample} {wildcards.sample} {params.species} "
            "-1 {input.forward} {input.reverse} > {output}"
	
	
	rule ariba_prepareref:
		input:
			gene_dbs="db/{db}/{db}.fa",
			gene_tsv="db/{db}/{db}.tsv"
		output:
			gene_preps="db/{db}/prepareref.{db}"
		shell:
			"ariba prepareref -f {input.gene_dbs} -m {input.gene_tsv} {output.gene_preps}"

	rule ariba:
		input:
			prepref = "db/{db}/prepareref.{db}",
			forward = "fastq/{sample}_1.fastq",
			reverse = "fastq/{sample}_2.fastq"
		params:
			outdir="ariba/{db}/{sample}",
			report="ariba/{db}/{sample}/report.tsv"
		output:
			"ariba/{db}/{sample}.report.tab"
		shell:
			"ariba run --force {input.prepref} {input.forward} {input.reverse} {params.outdir} && "
			"mv {params.report} {output}"
		
	
########################################
############### Variants ###############
########################################

# Snippy in the environment requires the following:
# Install latest Python 3.5 freebayes=1.1.0=3 from BioConda
# Install bzip2 from Conda-Forge (add to channels in YAML)
# Then install standard Snippy from BioConda - for some reason the
# normal install does not work unless using this sequence of installations.

rule snippy:
    input:
        forward="fastq/{sample}_1.fastq",
        reverse="fastq/{sample}_2.fastq"
    params:
        outdir = "snippy/{sample}",
        reference = config["snippy"]["reference"],
        mincov = config["snippy"]["mincov"],
        minfrac = config["snippy"]["minfrac"],
        mapqual = config["snippy"]["mapqual"],
        other = config["snippy"]["other"],
        cpu = config["snippy"]["cpu"]
    output:
        "snippy/{sample}/{sample}.tab",
        "snippy/{sample}/{sample}.depth"
    shell:
        "LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH && "
        "snippy --force --outdir {params.outdir} --ref {params.reference} "
        "--R1 {input.forward} --R2 {input.reverse} --cpus {params.cpu} "
        "--mincov {params.mincov} --minfrac {params.minfrac} "
        "--mapqual {params.mapqual} --prefix {wildcards.sample} {params.other} "
        "&& gzip -d snippy/{wildcards.sample}/{wildcards.sample}.depth.gz"

########################################
########### Set Analysis ###############
########################################

rule snippy_core:
    input:
        expand("snippy/{sample}/{sample}.tab", sample=SAMPLES)
    output:
        "variants/snippy.core.full.aln",
        "variants/snippy.core.aln"
    shell:
        "snippy-core --prefix snippy.core snippy/* && "
        "mv snippy.core.* variants/"

rule fasttree_snp:
    input:
        "variants/snippy.core.aln"
    output:
        "fasttree/snippy.core.tree"
    shell:
        "FastTree -gtr -nt {input} > {output}"

rule raxml_ng:
    input:
        "variants/snippy.core.aln"
    params:
        model = config["raxml_ng"]["model"],
        correction = config["raxml_ng"]["correction"],
        bootstrap = config["raxml_ng"]["bootstrap"],
        other = config["raxml_ng"]["other"]
    output:
        "raxml-ng/snippy.core.raxml.bestTree"
    threads:
        config["raxml_ng"]["cpu"]
    shell:
        "raxml-ng --all --model {params.model}{params.correction} --prefix raxml-ng/snippy.core.aln --threads {threads} "
        "--msa {input} --bs-trees {params.bootstrap}"

if config["pangenome"]:
    rule roary:
        input:
            expand("prokka/{sample}/{sample}.gff", sample=SAMPLES)
        params:
            core=config["roary"]["core"],
            identity=config["roary"]["identity"],
            other=config["roary"]["other"]
        output:
            "roary/gene_presence_absence.csv"
        threads:
            config["roary"]["cpu"]
        shell:
            "roary -p {threads} -f ./roary -i {params.identity} -cd {params.core} {params.other} {input} && "
            "mv roary_*/* ./roary && rm -rf ./roary_* && "
            "cp roary/core_gene_alignment.aln core_alignment/core_alignment_roary.fasta"

if config["recombination"]:
    rule gubbins:
        input:
            "variants/snippy.core.full.aln"
        params:
            model = config["gubbins"]["model"],
            prefix = "recomb",
            tree_builder = config["gubbins"]["tree_builder"],
            iterations = config["gubbins"]["iterations"],
            min_snps = config["gubbins"]["min_snps"],
            min_window_size = config["gubbins"]["min_window_size"],
            max_window_size = config["gubbins"]["max_window_size"],
            filter_percentage = config["gubbins"]["filter_percentage"],
            other = config["gubbins"]["other"]
        output:
            "gubbins/recomb.final_tree.tre"
        shell:
            "run_gubbins.py --tree_builder {params.tree_builder} --iterations {params.iterations} --raxml_model "
            "{params.model} --min_snps {params.min_snps} --min_window_size {params.min_window_size} "
            "--max_window_size {params.max_window_size} --filter_percentage {params.filter_percentage} "
            "--prefix {params.prefix} {params.other} {input} && mv {params.prefix}* gubbins"



